
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AddressesScalarFieldEnum = {
  id: 'id',
  employee_id: 'employee_id',
  address_line1: 'address_line1',
  address_line2: 'address_line2',
  city: 'city',
  state: 'state',
  country: 'country',
  pincode: 'pincode'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  empid: 'empid',
  check_in: 'check_in',
  check_out: 'check_out',
  total_hours: 'total_hours',
  date: 'date',
  created_at: 'created_at',
  attendance_status: 'attendance_status'
};

exports.Prisma.Audit_logsScalarFieldEnum = {
  id: 'id',
  empid: 'empid',
  performed_by: 'performed_by',
  action: 'action',
  timestamp: 'timestamp'
};

exports.Prisma.Bank_detailsScalarFieldEnum = {
  id: 'id',
  employee_id: 'employee_id',
  account_holder_name: 'account_holder_name',
  bank_name: 'bank_name',
  branch_name: 'branch_name',
  account_number: 'account_number',
  ifsc_code: 'ifsc_code',
  checkbook_document: 'checkbook_document'
};

exports.Prisma.CandidatesScalarFieldEnum = {
  id: 'id',
  candidate_id: 'candidate_id',
  name: 'name',
  email: 'email',
  contact_number: 'contact_number',
  interview_date: 'interview_date',
  resume: 'resume',
  form_link: 'form_link',
  status: 'status',
  created_at: 'created_at',
  form_token: 'form_token',
  interview_mail_status: 'interview_mail_status',
  form_status: 'form_status',
  verification: 'verification'
};

exports.Prisma.Compliance_documentsScalarFieldEnum = {
  id: 'id',
  empid: 'empid',
  doc_type: 'doc_type',
  file_path: 'file_path',
  uploaded_at: 'uploaded_at',
  expires_on: 'expires_on'
};

exports.Prisma.Compliance_statusScalarFieldEnum = {
  empid: 'empid',
  overall_status: 'overall_status',
  last_updated: 'last_updated'
};

exports.Prisma.EmployeesScalarFieldEnum = {
  empid: 'empid',
  candidate_id: 'candidate_id',
  name: 'name',
  email: 'email',
  contact_no: 'contact_no',
  password: 'password',
  gender: 'gender',
  dob: 'dob',
  aadhar_card: 'aadhar_card',
  pan_card: 'pan_card',
  education_certificates: 'education_certificates',
  resume: 'resume',
  experience_certificate: 'experience_certificate',
  profile_photo: 'profile_photo',
  created_at: 'created_at',
  experience_years: 'experience_years',
  experience_months: 'experience_months',
  employee_type: 'employee_type',
  aadhar_number: 'aadhar_number',
  pan_number: 'pan_number'
};

exports.Prisma.Main_employeeScalarFieldEnum = {
  empid: 'empid',
  candidate_id: 'candidate_id',
  email: 'email',
  password: 'password',
  role: 'role',
  name: 'name',
  contact: 'contact',
  position: 'position',
  doj: 'doj',
  gender: 'gender',
  dob: 'dob',
  address: 'address',
  employee_type: 'employee_type',
  experience: 'experience',
  profile_photo: 'profile_photo',
  aadhar_card: 'aadhar_card',
  pan_card: 'pan_card',
  education_certificates: 'education_certificates',
  resume: 'resume',
  experience_certificate: 'experience_certificate',
  bank_details: 'bank_details',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.Leave_typesScalarFieldEnum = {
  id: 'id',
  type_name: 'type_name',
  max_days: 'max_days',
  paid: 'paid'
};

exports.Prisma.Leave_balancesScalarFieldEnum = {
  id: 'id',
  empid: 'empid',
  type_id: 'type_id',
  total: 'total',
  used: 'used',
  remaining: 'remaining'
};

exports.Prisma.Leave_requestsScalarFieldEnum = {
  id: 'id',
  empid: 'empid',
  from_date: 'from_date',
  to_date: 'to_date',
  reason: 'reason',
  status: 'status',
  applied_at: 'applied_at',
  attachment: 'attachment',
  leave_type: 'leave_type',
  name: 'name'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  empid: 'empid',
  name: 'name',
  email: 'email',
  contact_number: 'contact_number',
  password: 'password',
  position: 'position',
  date_of_joining: 'date_of_joining',
  status: 'status',
  experience: 'experience',
  profile_photo: 'profile_photo',
  role: 'role',
  created_at: 'created_at',
  verified: 'verified'
};

exports.Prisma.PayrollScalarFieldEnum = {
  id: 'id',
  empid: 'empid',
  month: 'month',
  year: 'year',
  basic_salary: 'basic_salary',
  hra: 'hra',
  bonus: 'bonus',
  da: 'da',
  allowances: 'allowances',
  deductions: 'deductions',
  net_pay: 'net_pay',
  generated_on: 'generated_on',
  payslip_pdf: 'payslip_pdf',
  pf: 'pf',
  ptax: 'ptax',
  esic: 'esic'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.attendance_attendance_status = exports.$Enums.attendance_attendance_status = {
  Present: 'Present',
  Absent: 'Absent'
};

exports.candidates_status = exports.$Enums.candidates_status = {
  Pending: 'Pending',
  Mail_Sent: 'Mail_Sent',
  Document_Submitted: 'Document_Submitted',
  Selected: 'Selected',
  Rejected: 'Rejected',
  Waiting: 'Waiting'
};

exports.compliance_status_overall_status = exports.$Enums.compliance_status_overall_status = {
  Compliant: 'Compliant',
  Expiring_Soon: 'Expiring_Soon',
  Non_compliant: 'Non_compliant'
};

exports.employees_employee_type = exports.$Enums.employees_employee_type = {
  Full_time: 'Full_time',
  Intern: 'Intern',
  Contractor: 'Contractor'
};

exports.leave_types_type_name = exports.$Enums.leave_types_type_name = {
  Sick_Leave: 'Sick_Leave',
  Casual_Leave: 'Casual_Leave',
  Earned_Leave: 'Earned_Leave',
  Maternity_Leave: 'Maternity_Leave',
  Unpaid_Leave: 'Unpaid_Leave'
};

exports.leave_requests_status = exports.$Enums.leave_requests_status = {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected'
};

exports.users_role = exports.$Enums.users_role = {
  hr: 'hr',
  employee: 'employee',
  admin: 'admin',
  ceo: 'ceo'
};

exports.users_verified = exports.$Enums.users_verified = {
  verified: 'verified',
  not_verified: 'not_verified'
};

exports.Prisma.ModelName = {
  addresses: 'addresses',
  attendance: 'attendance',
  audit_logs: 'audit_logs',
  bank_details: 'bank_details',
  candidates: 'candidates',
  compliance_documents: 'compliance_documents',
  compliance_status: 'compliance_status',
  employees: 'employees',
  main_employee: 'main_employee',
  leave_types: 'leave_types',
  leave_balances: 'leave_balances',
  leave_requests: 'leave_requests',
  users: 'users',
  payroll: 'payroll'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
